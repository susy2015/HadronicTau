#ifndef EFFICIENCY_H
#define EFFICIENCY_H

class Efficiency{
 public:
// The acceptance is from a measurement after baseline
// Stat. uncertainty of the number need to be provided as well
  static double acc(int njetbin);
  static double reco(int ptbin, int actbin);
  static double iso(int ptbin, int actbin);
  static double taumucor(int ptbin);
  static int Ptbin(double pt); 
  static int Ptbin1(double pt);
  static int Actbin(double act);
  static int Njetbin(int njet);
  static double mistag(int ptbin);  
  static double SBaccTT(int searchbin);
  static double SBmtwTT(int searchbin);
  static double SBaccnodphi(int searchbin);
  static double SBmtwnodphi(int searchbin);
  static double SBaccWJet(int searchbin);
  static double SBmtwWJet(int searchbin);
  static double SBaccMix(int searchbin);
  static double SBmtwMix(int searchbin);
  static double SBisotrkeffTT(int searchbin);
  static double MT2Bin_mtwcorr() {return 0.888;}
  static double MT2Bin_isotrkcorr(){return  0.309;}
  static double isotrkeffTT(int njetbin);
  static int NJetbin(int nJet);
};

int Efficiency::Ptbin(double pt){
  int bin =0;
  if(pt>=10. && pt<20.) bin =1;
  if(pt>=20. && pt<30.) bin =2;  
  if(pt>=30. && pt<40.) bin =3;
  if(pt>=40. && pt<50.) bin =4;
  if(pt>=50. && pt<70.) bin =5;
  if(pt>=70. && pt<100.) bin =6;
  if(pt>=100.) bin =7;
  return bin;
 }
/*
int Efficiency::Ptbin1(double pt){
  int bin =0;
  if(pt>=50. && pt<100.) bin =1;
  if(pt>=100. && pt<150.) bin =2;
  if(pt>=150. && pt<180.) bin =3;
  if(pt>=180. && pt<250.) bin =4;
  if(pt>=250. && pt<300.) bin =5;
  if(pt>=300. && pt<1000.) bin =6;  
  if(pt>=1000.) bin =7;
  return bin;
 }
*/
int Efficiency::Ptbin1(double pt){
  int bin =0;
  if(pt>=30. && pt<60.) bin =1;
  if(pt>=60. && pt<90.) bin =2;
  if(pt>=90. && pt<120.) bin =3;
  if(pt>=120. && pt<150.) bin =4;
  if(pt>=150. && pt<180.) bin =5;
  if(pt>=180. && pt<210.) bin =6;
  if(pt>=210. && pt<240.) bin =7;
  if(pt>=240. && pt<270.) bin =8;
  if(pt>=270. && pt<300.) bin =9;
  if(pt>=300. && pt<330.) bin =10;
  if(pt>=330. && pt<360.) bin =11;
  if(pt>=360. && pt<390.) bin =12;
  if(pt>=390. && pt<420.) bin =13;
  if(pt>=420. && pt<450.) bin =14;
  if(pt>=450. && pt<500.) bin =15;
  if(pt>=500. && pt<1000.) bin =16;
  if(pt>=1000.) bin =17;
  return bin;
}

int Efficiency::Actbin(double act){
  int bin =0;
  if(act>=5. && act<10.) bin =1;
  if(act>=10. && act<20.) bin =2;
  if(act>=20. && act<40.) bin =3;
  if(act>=40. && act<60.) bin =4;
  if(act>=60. && act<80.) bin =5;
  if(act>=80. && act<100.) bin =6;
  if(act>=100.) bin =7;
  return bin;
}

int Efficiency::Njetbin(int njet){
  int bin = 0;
  if(njet==5) bin =1;
  if(njet==6) bin =2;
  if(njet==7) bin =3;
  if(njet==8) bin =4;
  if(njet>=9) bin =5;
  return bin;
}

int Efficiency::NJetbin(int nJet){
  int bin = 0;
  if(nJet==5) bin =1;
  if(nJet==6) bin =2;
  if(nJet==7) bin =3;
  if(nJet==8) bin =4;
  if(nJet==9) bin =5;
  if(nJet>=10) bin =6;
  return bin;
}

double Efficiency::reco(int ptbin, int actbin){
  double mu_recoeff[8][8] = {{0.952769,0.906542,0.939655,0.93617,0.93038,0.914894,0.92,0.903766},{0.962189,0.966667,0.930147,0.963989,0.963768,0.915254,0.952381,0.95539},{0.971917,0.966019,0.97619,0.934911,0.964126,0.945652,0.951456,0.976048},{0.979784,0.980769,0.949239,0.944206,0.940367,0.960526,0.971429,0.975},{0.980216,0.943089,0.992958,0.986486,0.982955,0.962963,0.9625,0.953757},{0.981664,0.965517,0.949495,0.972125,0.929204,0.960452,0.971223,0.951557},{0.96882,0.990566,0.958042,0.985294,0.954545,0.954545,0.934579,0.95053},{0.925926,0.928571,0.92,0.896552,0.913043,0.9,0.918367,0.932773}};

 double reco = mu_recoeff[ptbin][actbin];
 return reco;
}


double Efficiency::iso(int ptbin, int actbin){
  double mu_isoeff[8][8] = {{0.926544,0.808081,0.77193,0.73743,0.729167,0.752688,0.71831,0.599099},{0.966805,0.884058,0.887597,0.849432,0.833948,0.825,0.762295,0.73622},{0.980271,0.945545,0.936585,0.898773,0.884259,0.8125,0.913462,0.766082},{0.995851,0.993464,0.958115,0.930435,0.925,0.899281,0.913462,0.869792},{0.987544,0.991379,0.962687,0.965686,0.955801,0.935185,0.878378,0.899441},{0.991058,0.982143,0.984127,1,0.990338,0.977528,0.945736,0.930147},{0.997625,1,0.992701,0.995,0.978947,1,0.989796,0.958801},{1,1,1,1,1,1,1,0.996865}};

  double iso = mu_isoeff[ptbin][actbin];
  return iso;
 }

double Efficiency::taumucor(int ptbin){
  double frac = 0.897;
  if(ptbin==1) frac = 0.958;
  if(ptbin==2) frac = 0.982;
  if(ptbin==3) frac = 0.984;
  if(ptbin==4) frac = 1;
  return frac;
 }

double Efficiency::acc(int njetbin){
  double mu_acc[6] = {0.512, 0.697, 0.771, 0.826, 0.848, 0.880};//ttbar acc with correction included
  //double mu_acc[6] = {0.537, 0.717, 0.783, 0.839, 0.859, 0.888};//Mix
  //  double mu_acc[6] = {0.536, 0.721, 0.792, 0.845, 0.862, 0.892};//ttbar
  double acc = mu_acc[njetbin];
  return acc;
}


double Efficiency::mistag(int ptbin){
  //double mistag[9] ={0.1121, 0.1756, 0.1773, 0.1678, 0.2155, 0.3132, 0.42, 0.4102, 0.4102};
  double mistag[18] = {0., 0.0929165, 0.0977224, 0.097206, 0.0984691, 0.0988062, 0.0769717, 0.0807692, 0.075177, 0.0796671, 0.0665965, 0.0717385, 0.0602786, 0.0747461, 0.0429148, 0.0590428, 0.047948, 0.047948};
  double rate = mistag[ptbin];
  return rate;
}
double Efficiency::SBaccTT(int searchbin){
  //  double SBmu_acc[64] = {0.695287, 0.746622, 0.840036, 0.83282, 0.807995, 0.768952, 0.753436, 0.721878, 0.600835, 0.704391, 0.961956, 0.920233, 0.797839, 0.990729, 0.758673, 0.720608, 0.770913, 0.798066, 0.855825, 0.759829, 0.767666, 0.762512, 0.739176, 0.846315, 0.982837, 0.949436, 0.892656, 0.791334, 0.819291, 0.785425, 0.864001, 0.806848, 0.883936, 0.865207, 0.859751, 1, 0.767765, 0.823534, 0.763273, 0.798225, 1, 0.970081, 0.924949, 0.948101, 0.890033, 0.925639, 1, 0.781987, 0.802574, 0.867383, 0.852705, 0.873463, 0.898072, 0.80084, 1, 1, 0.881096, 0.929991, 1, 0.965019, 0.701631, 0.906791, 0.88579, 0.999793};
  double SBmu_acc[64] = {0.670, 0.727, 0.828, 0.822, 0.790, 0.749, 0.732, 0.703, 0.578, 0.684, 0.958, 0.918, 0.777, 0.991, 0.753, 0.699, 0.753, 0.773, 0.837, 0.738, 0.746, 0.739, 0.696, 0.829, 0.982, 0.950, 0.888, 0.718, 0.778, 0.765, 0.843, 0.789, 0.873, 0.849, 0.859, 1.000, 0.736, 0.814, 0.751, 0.786, 1.000, 0.969, 0.926, 0.949, 0.873, 0.914, 1.000, 0.760, 0.767, 0.849, 0.825, 0.848, 0.896, 0.782, 1.000, 1.000, 0.865, 0.931, 1.000, 0.966, 0.664, 0.886, 0.872, 1.000};
  double SBacc = SBmu_acc[searchbin];
  return SBacc;
}
double Efficiency::SBmtwTT(int searchbin){
  //  double SBmtwcorr[64] = {0.863, 0.877, 0.875, 0.859, 0.925, 0.856, 0.900, 0.904, 0.954, 0.930, 0.830, 0.841, 0.966, 0.928, 0.834, 0.870, 0.888, 0.875, 0.915, 0.873, 0.884, 0.921, 0.830, 0.944, 0.872, 0.768, 0.909, 0.929, 0.971, 0.880, 0.852, 0.861, 0.947, 0.884, 0.919, 0.982, 0.886, 0.860, 0.903, 0.901, 0.877, 0.859, 0.858, 0.988, 0.877, 0.864, 0.849, 0.851, 0.873, 0.862, 0.881, 0.940, 0.829, 0.838, 0.973, 0.987, 0.865, 0.781, 0.768, 0.929, 0.939, 0.863, 0.995, 0.882};
  double SBmtwcorr[64] = {0.841, 0.853, 0.840, 0.819, 0.899, 0.836, 0.882, 0.885, 0.949, 0.897, 0.779, 0.829, 0.960, 0.888, 0.798, 0.850, 0.864, 0.846, 0.899, 0.858, 0.864, 0.904, 0.799, 0.927, 0.748, 0.776, 0.892, 0.898, 0.950, 0.859, 0.825, 0.808, 0.946, 0.869, 0.910, 0.976, 0.868, 0.837, 0.885, 0.876, 0.946, 0.809, 0.818, 0.983, 0.859, 0.849, 0.819, 0.836, 0.854, 0.848, 0.851, 0.929, 0.825, 0.814, 0.963, 0.979, 0.845, 0.783, 0.894, 0.925, 0.939, 0.841, 0.995, 0.874};
  double SBmtw = SBmtwcorr[searchbin];
  return SBmtw;
}
double Efficiency::SBaccnodphi(int searchbin){
  double SBmu_accnodphi[64] = {0.725219, 0.777768, 0.837025, 0.884929, 0.728064, 0.808233, 0.779869, 0.740782, 0.664277, 0.69095, 0.903544, 0.892779, 0.84009, 0.995591, 0.805483, 0.746682, 0.797733, 0.857889, 0.877384, 0.785587, 0.775484, 0.764902, 0.75158, 0.863731, 0.993342, 0.950837, 0.890083, 0.814414, 0.906134, 0.810693, 0.906884, 0.808551, 0.949079, 0.894073, 0.914824, 1, 0.773056, 0.853611, 0.816888, 0.859684, 0.942118, 0.955296, 0.877993, 0.897569, 0.906619, 0.923353, 1, 0.792755, 0.820229, 0.861471, 0.851085, 0.870998, 0.921083, 0.880977, 1, 1, 0.913003, 0.896263, 1, 0.950034, 0.82566, 0.914178, 0.932712, 0.999874};
 double SBaccnodphi = SBmu_accnodphi[searchbin];
  return SBaccnodphi;
}
double Efficiency::SBmtwnodphi(int searchbin){
  double SBmtwcorrnodphi[64] = {0.873115, 0.865229, 0.861828, 0.878215, 0.917523, 0.875809, 0.902262, 0.910715, 0.938843, 0.930493, 0.812422, 0.886385, 0.95532, 0.888961, 0.804952, 0.876409, 0.889725, 0.878006, 0.927725, 0.86235, 0.887832, 0.901863, 0.825892, 0.916486, 0.926413, 0.852672, 0.89057, 0.919501, 0.920388, 0.883547, 0.884153, 0.888384, 0.928747, 0.891333, 0.926148, 0.942207, 0.878294, 0.873398, 0.905406, 0.898959, 0.907795, 0.890353, 0.903083, 0.870207, 0.881392, 0.89521, 0.920248, 0.866745, 0.874493, 0.830767, 0.863346, 0.945501, 0.826881, 0.839798, 0.968342, 0.969095, 0.85856, 0.834408, 0.880554, 0.927851, 0.808478, 0.868106, 0.962894, 0.905028};
  double SBmtwnodphi = SBmtwcorrnodphi[searchbin];
  return SBmtwnodphi;
}
double Efficiency::SBaccWJet(int searchbin){
  double SBmu_accWJet[64] = {0.651869, 0.6497, 0.703992, 0.8642, 0.88908, 0.617345, 0.651564, 0.569514, 0.493242, 0.61041, 0.841272, 0.805882, 0.790847, 0.71987, 0.824452, 0.660427, 0.67347, 0.797142, 0.925563, 0.602337, 0.43599, 0.577601, 0.507201, 0.693462, 0.772876, 0.740219, 0.762466, 0.660693, 0.920484, 0.664529, 0.697565, 0.76018, 0.980988, 0.785283, 0.827999, 0.973271, 0.767508, 0.787891, 0.356061, 0.802899, 0.949643, 0.815764, 0.702764, 0.829469, 0.732068, 0.996533, 1, 0.874851, 0.763491, 0.868127, 0.486653, 1, 1, 0.588012, 1, 1, 0.894191, 1, 1, 0.999996, 0.582769, 1, 1, 0.720502};
  double SBaccWJet = SBmu_accWJet[searchbin];
  return SBaccWJet;
}
double Efficiency::SBmtwWJet(int searchbin){
  double SBmtwcorrWJet[64] = {0.867448, 0.896939, 0.918014, 0.918505, 0.950424, 0.821365, 0.884778, 0.934593, 0.937735, 0.909692, 0.961589, 0.848281, 0.915551, 0.901287, 0.954185, 0.917369, 0.9563, 0.910068, 0.932275, 0.890071, 0.877368, 0.950981, 0.939498, 0.964275, 0.928222, 0.920418, 0.967563, 0.961891, 0.925521, 0.926472, 0.974409, 0.97631, 0.895262, 0.8944, 0.902065, 0.720042, 0.846017, 0.917606, 0.865992, 0.893082, 0.948409, 0.821557, 0.851431, 0.936345, 0.795299, 0.819706, 0.956564, 0.937143, 0.932238, 0.945638, 0.894229, 0.863625, 0.955533, 0.996531, 1, 0.978413, 0.975146, 1, 0.97956, 0.970066, 0.947759, 0.893961, 1, 1};
  double SBmtwWJet = SBmtwcorrWJet[searchbin];
  return SBmtwWJet;
}

double Efficiency::SBaccMix(int searchbin){
  double SBacc_Mix[64] = {0.689, 0.725, 0.806, 0.841, 0.835, 0.747, 0.736, 0.685, 0.569, 0.665, 0.903, 0.895, 0.796, 0.828, 0.799, 0.718, 0.766, 0.798, 0.862, 0.752, 0.735, 0.745, 0.716, 0.820, 0.929, 0.908, 0.867, 0.757, 0.845, 0.783, 0.861, 0.805, 0.892, 0.861, 0.857, 0.997, 0.768, 0.821, 0.703, 0.799, 0.989, 0.948, 0.889, 0.911, 0.888, 0.926, 1.000, 0.784, 0.802, 0.867, 0.840, 0.878, 0.900, 0.788, 1.000, 1.000, 0.881, 0.932, 1.000, 0.967, 0.694, 0.908, 0.886, 0.995};
  double SBaccMix = SBacc_Mix[searchbin];
  return SBaccMix;
}

double Efficiency::SBmtwMix(int searchbin){
  double SBmtwcorrMix[64] = {0.863, 0.881, 0.885, 0.878, 0.934, 0.852, 0.897, 0.910, 0.950, 0.923, 0.897, 0.842, 0.954, 0.914, 0.912, 0.872, 0.891, 0.878, 0.917, 0.873, 0.883, 0.924, 0.838, 0.947, 0.884, 0.788, 0.921, 0.938, 0.955, 0.881, 0.854, 0.866, 0.941, 0.885, 0.918, 0.956, 0.884, 0.867, 0.900, 0.900, 0.895, 0.854, 0.857, 0.972, 0.876, 0.863, 0.851, 0.853, 0.874, 0.863, 0.881, 0.936, 0.835, 0.846, 0.974, 0.986, 0.868, 0.787, 0.781, 0.931, 0.940, 0.864, 0.995, 0.883};
  double SBmtwMix = SBmtwcorrMix[searchbin];
  return SBmtwMix;
}

double Efficiency::SBisotrkeffTT(int searchbin){
  double SBisotrkeffTT[64] = {0.292, 0.314, 0.278, 0.385, 0.333, 0.357, 0.281, 0.299, 0.240, 0.364, 0.333, 0.231, 0.450, 0.450, 0.450, 0.241, 0.296, 0.227, 0.571, 0.309, 0.429, 0.465, 0.171, 0.171, 0.171, 0.500, 0.375, 0.600, 0.333, 0.242, 0.147, 0.278, 0.429, 0.397, 0.500, 0.500, 0.224, 0.344, 0.333, 0.143, 0.500, 0.417, 0.429, 0.625, 0.356, 0.438, 0.333, 0.297, 0.333, 0.429, 0.429, 0.429, 0.400, 0.308, 0.308, 0.308, 0.318, 0.318, 0.318, 0.333, 0.333, 0.125, 0.600, 0.667};
 double SBisotrkeff = SBisotrkeffTT[searchbin];
 return SBisotrkeff;
}

double Efficiency::isotrkeffTT(int njetbin){

  //  double isotrk[7] = {0.171, 0.282, 0.338, 0.342, 0.373, 0.357, 0.377};
  double isotrk[7] = {0.0};
  double eff = isotrk[njetbin];
  return eff;
}

#endif
